// Global variables
let playerData = [];
let visibleColumns = [];
let currentSort = { column: null, direction: 'asc' };

// DOM Elements with null checks
const table = document.getElementById('playerStatsTable');
const thead = table?.querySelector('thead tr');
const tbody = table?.querySelector('tbody');
const positionFilter = document.getElementById('positionFilter');
const teamFilter = document.getElementById('teamFilter');
const playerSearch = document.getElementById('playerSearch');
const columnSelector = document.getElementById('columnSelector');
const loadingSpinner = document.getElementById('loadingSpinner');

// Default columns configuration
const defaultColumns = [
    'player',
    'pos',
    'team',
    'min',
    'usage',
    'pts',
    'reb',
    'ast',
    'stl',
    'blk'
];

// Column display names mapping
const columnDisplayNames = {
    rank: 'Rank',
    player: 'Player Name',
    pos: 'POS',
    team: 'Team',
    min: 'MPG',
    usage: 'USG%',
    pts: 'PPG',
    reb: 'RPG',
    ast: 'APG',
    stl: 'SPG',
    blk: 'BPG',
    fgm: 'FGM',
    fga: 'FGA',
    ftm: 'FTM',
    fta: 'FTA',
    fg: 'FG%',
    ft: 'FT%',
    tov: 'TOV',
    ballhog: 'Ball Hog Rating'
};

// Stat thresholds for visual feedback with new rating system
const statRatings = {
    pts: { elite: 27, veryGood: 23, good: 18, average: 14, belowAverage: 10 },
    reb: { elite: 12, veryGood: 9, good: 7, average: 5, belowAverage: 3 },
    ast: { elite: 9, veryGood: 7, good: 5, average: 3, belowAverage: 2 },
    stl: { elite: 2.2, veryGood: 1.8, good: 1.4, average: 1, belowAverage: 0.6 },
    blk: { elite: 2.2, veryGood: 1.8, good: 1.4, average: 0.8, belowAverage: 0.4 },
    fg: { elite: 0.58, veryGood: 0.53, good: 0.48, average: 0.44, belowAverage: 0.40 }
};

// Validate required DOM elements
function validateDOMElements() {
    const requiredElements = [
        { element: table, name: 'playerStatsTable' },
        { element: thead, name: 'thead tr' },
        { element: tbody, name: 'tbody' },
        { element: positionFilter, name: 'positionFilter' },
        { element: teamFilter, name: 'teamFilter' },
        { element: playerSearch, name: 'playerSearch' },
        { element: columnSelector, name: 'columnSelector' }
    ];

    const missingElements = requiredElements
        .filter(({ element }) => !element)
        .map(({ name }) => name);

    if (missingElements.length > 0) {
        throw new Error(`Missing required DOM elements: ${missingElements.join(', ')}`);
    }
}

// Show loading spinner
function showLoadingSpinner() {
    if (loadingSpinner) {
        loadingSpinner.classList.remove('hidden');
    }
}

// Hide loading spinner
function hideLoadingSpinner() {
    if (loadingSpinner) {
        loadingSpinner.classList.add('hidden');
    }
}

// Error handling with toast notifications
function showError(message) {
    console.error(message);
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-red-50 border-l-4 border-red-500 p-4 shadow-lg rounded';
    toast.innerHTML = `
        <div class="flex items-center">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-red-700">${message}</p>
            </div>
        </div>
    `;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}

// Show success notification
function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 shadow-lg rounded';
    toast.innerHTML = `
        <div class="flex items-center">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-green-700">${message}</p>
            </div>
        </div>
    `;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}

// Create color guide with error handling
function createColorGuide() {
    try {
        const guide = document.createElement('div');
        guide.className = 'color-guide';
        guide.innerHTML = `
            <h3 class="color-guide-title">Stats Rating Guide</h3>
            <div class="color-guide-list">
                <span class="color-guide-item color-guide-elite">Elite</span>
                <span class="color-guide-item color-guide-very-good">Very Good</span>
                <span class="color-guide-item color-guide-good">Good</span>
                <span class="color-guide-item color-guide-average">Average</span>
                <span class="color-guide-item color-guide-below-average">Below Average</span>
                <span class="color-guide-item color-guide-not-good">Not Good</span>
            </div>
        `;
        
        const tableContainer = document.querySelector('.table-container');
        if (!tableContainer) {
            console.warn('Table container not found, appending color guide before table');
            if (table && table.parentNode) {
                table.parentNode.insertBefore(guide, table);
            } else {
                document.body.appendChild(guide);
            }
        } else {
            tableContainer.parentNode.insertBefore(guide, tableContainer);
        }
    } catch (error) {
        console.warn('Failed to create color guide:', error);
    }
}

// Create back to top button with error handling
function createBackToTopButton() {
    try {
        const existingButton = document.querySelector('.back-to-top');
        if (existingButton) {
            existingButton.remove();
        }

        const button = document.createElement('div');
        button.className = 'back-to-top';
        button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>
        `;
        document.body.appendChild(button);

        window.addEventListener('scroll', () => {
            if (button) {
                if (window.pageYOffset > 300) {
                    button.classList.add('visible');
                } else {
                    button.classList.remove('visible');
                }
            }
        });

        button.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    } catch (error) {
        console.warn('Failed to create back to top button:', error);
    }
}

// Fetch player data from API with error handling
async function fetchPlayerData() {
    try {
        const response = await fetch('/api/players');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Fetched data:', data);
        return data;
    } catch (error) {
        console.error('Fetch error:', error);
        throw new Error('Failed to fetch player data: ' + error.message);
    }
}

// Initialize page content with comprehensive error handling
async function initializePage() {
    try {
        validateDOMElements();
        showLoadingSpinner();
        
        playerData = await fetchPlayerData();
        console.log('Fetched player data:', playerData);
        
        if (!Array.isArray(playerData) || playerData.length === 0) {
            throw new Error('No player data received or invalid data format');
        }
        
        visibleColumns = [...defaultColumns];
        
        setupColumnSelector();
        populateFilters();
        setupEventListeners();
        
        try {
            createBackToTopButton();
        } catch (error) {
            console.warn('Failed to create back to top button:', error);
        }
        
        try {
            createColorGuide();
        } catch (error) {
            console.warn('Failed to create color guide:', error);
        }
        
        filterAndUpdateTable();
        showSuccess('Page initialized successfully');
    } catch (error) {
        console.error('Initialization error:', error);
        showError('Failed to initialize page: ' + error.message);
    } finally {
        hideLoadingSpinner();
    }
}

// Set up column selector checkboxes
function setupColumnSelector() {
    if (!columnSelector) return;
    
    columnSelector.innerHTML = '';
    const availableColumns = playerData.length > 0 ? Object.keys(playerData[0]) : defaultColumns;
    
    availableColumns.forEach(column => {
        const div = document.createElement('div');
        div.className = 'flex items-center';
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.id = `col-${column}`;
        checkbox.checked = defaultColumns.includes(column);
        checkbox.className = 'form-checkbox h-4 w-4 text-ballhog-orange rounded border-gray-300';
        checkbox.addEventListener('change', () => toggleColumn(column, checkbox.checked));
        
        const label = document.createElement('label');
        label.htmlFor = `col-${column}`;
        label.className = 'ml-2 text-sm text-gray-700';
        label.textContent = columnDisplayNames[column] || column.toUpperCase();
        
        div.appendChild(checkbox);
        div.appendChild(label);
        columnSelector.appendChild(div);
    });
}

// Get stat class based on value and type
function getStatClass(value, statType) {
    if (!statRatings[statType] || !value) return '';
    
    const ratings = statRatings[statType];
    const numValue = parseFloat(value);
    
    if (numValue >= ratings.elite) return 'stat-elite';
    if (numValue >= ratings.veryGood) return 'stat-very-good';
    if (numValue >= ratings.good) return 'stat-good';
    if (numValue >= ratings.average) return 'stat-average';
    if (numValue >= ratings.belowAverage) return 'stat-below-average';
    return 'stat-not-good';
}

// Populate filter dropdowns
function populateFilters() {
    const positions = new Set();
    const teams = new Set();

    playerData.forEach(player => {
        if (player.pos) positions.add(player.pos);
        if (player.team) teams.add(player.team);
    });

    populateFilterOptions(positionFilter, positions);
    populateFilterOptions(teamFilter, teams);
}

// Helper function to populate filter dropdowns
function populateFilterOptions(selectElement, options) {
    if (!selectElement) return;
    
    const currentValue = selectElement.value;
    selectElement.innerHTML = '<option value="">All</option>';
    [...options].sort().forEach(option => {
        const optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.textContent = option;
        selectElement.appendChild(optionElement);
    });
    selectElement.value = currentValue;
}

// Set up event listeners with error handling
function setupEventListeners() {
    try {
        if (positionFilter) {
            positionFilter.addEventListener('change', filterAndUpdateTable);
        }
        if (teamFilter) {
            teamFilter.addEventListener('change', filterAndUpdateTable);
        }
        if (playerSearch) {
            playerSearch.addEventListener('input', debounce(filterAndUpdateTable, 300));
        }
        
        if (thead) {
            thead.addEventListener('click', (e) => {
                const th = e.target.closest('th');
                if (th && th.dataset.column) {
                    sortTable(th.dataset.column);
                }
            });
        }

        // Keyboard navigation
        if (table) {
            table.addEventListener('keydown', handleKeyboardNavigation);
        }

        // Handle window resize for responsive design
        window.addEventListener('resize', debounce(handleResize, 250));

        // Handle scroll for table header stickiness
        window.addEventListener('scroll', handleScroll);
    } catch (error) {
        console.error('Error setting up event listeners:', error);
        showError('Failed to set up some interactive features');
    }
}

// Keyboard navigation handler
function handleKeyboardNavigation(e) {
    if (!tbody) return;
    
    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
        e.preventDefault();
        
        const currentRow = e.target.closest('tr');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(currentRow);
        
        let newRow;
        if (e.key === 'ArrowUp' && currentIndex > 0) {
            newRow = rows[currentIndex - 1];
        } else if (e.key === 'ArrowDown' && currentIndex < rows.length - 1) {
            newRow = rows[currentIndex + 1];
        }
        
        if (newRow) {
            const firstCell = newRow.querySelector('td');
            if (firstCell) firstCell.focus();
        }
    }
}

// Resize handler for responsive design
function handleResize() {
    try {
        const tableContainer = document.querySelector('.table-container');
        if (!tableContainer) return;

        if (window.innerWidth <= 768) {
            tableContainer.classList.add('mobile-view');
        } else {
            tableContainer.classList.remove('mobile-view');
        }
    } catch (error) {
        console.warn('Error handling resize:', error);
    }
}

// Scroll handler for sticky header
function handleScroll() {
    try {
        if (!thead || !table) return;

        const tableRect = table.getBoundingClientRect();
        
        if (tableRect.top < 0) {
            thead.classList.add('sticky-header');
        } else {
            thead.classList.remove('sticky-header');
        }
    } catch (error) {
        console.warn('Error handling scroll:', error);
    }
}

// Toggle column visibility
function toggleColumn(column, visible) {
    if (visible && !visibleColumns.includes(column)) {
        visibleColumns.push(column);
    } else if (!visible) {
        visibleColumns = visibleColumns.filter(col => col !== column);
    }
    updateTableWithData(playerData);
}

// Filter and update table
function filterAndUpdateTable() {
    try {
        if (!positionFilter || !teamFilter || !playerSearch) return;

        const position = positionFilter.value.toLowerCase();
        const team = teamFilter.value.toLowerCase();
        const searchTerm = playerSearch.value.toLowerCase();

        const filteredData = playerData.filter(player => {
            const matchesPosition = !position || (player.pos && player.pos.toLowerCase() === position);
            const matchesTeam = !team || (player.team && player.team.toLowerCase() === team);
            const matchesSearch = !searchTerm || 
                (player.player && player.player.toLowerCase().includes(searchTerm)) || 
                (player.team && player.team.toLowerCase().includes(searchTerm));
            
            return matchesPosition && matchesTeam && matchesSearch;
        });

        updateTableWithData(filteredData);
    } catch (error) {
        console.error('Error filtering table:', error);
        showError('Failed to update table with filters');
    }
}

// Update table with data
function updateTableWithData(data) {
    try {
        console.log('Updating table with data:', data);
        if (!thead || !tbody) return;
        
        // Update headers
        thead.innerHTML = '';
        visibleColumns.forEach(column => {
            const th = document.createElement('th');
            th.textContent = columnDisplayNames[column] || column;
            th.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100';
            th.dataset.column = column;
            
            if (currentSort.column === column) {
                th.classList.add(`sorted-${currentSort.direction}`);
            }
            
            thead.appendChild(th);
        });

        // Update rows
        tbody.innerHTML = '';
        if (!Array.isArray(data)) {
            console.error('Data is not an array:', data);
            return;
        }

        data.forEach((player, index) => {
            const row = document.createElement('tr');
            row.className = 'table-row-animate hover:bg-gray-50';
            row.style.animationDelay = `${index * 50}ms`;
            
            visibleColumns.forEach(column => {
                const cell = document.createElement('td');
                const value = player[column] ?? '-';
                cell.textContent = formatValue(value, column);
                cell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-900';
                
                // Add color coding for stats
                const statClass = getStatClass(value, column);
                if (statClass) {
                    cell.classList.add(statClass);
                }
                
                row.appendChild(cell);
            });
            
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('Error updating table:', error);
        showError('Failed to update table display');
    }
}

// Format cell values
function formatValue(value, column) {
    if (value === null || value === undefined) return '-';
    
    // Handle percentage values
    if (['fg', 'ft', 'usage'].includes(column)) {
        return `${(parseFloat(value) * 100).toFixed(1)}%`;
    }
    
    // Handle numeric values
    if (!isNaN(value) && typeof value !== 'boolean') {
        return parseFloat(value).toFixed(1);
    }
    
    return value;
}

// Sort table
function sortTable(column) {
    try {
        const direction = currentSort.column === column && currentSort.direction === 'asc' ? 'desc' : 'asc';
        currentSort = { column, direction };

        const sortedData = [...playerData].sort((a, b) => {
            let aVal = a[column];
            let bVal = b[column];

            // Handle numerical sorting
            if (!isNaN(aVal) && !isNaN(bVal)) {
                aVal = parseFloat(aVal);
                bVal = parseFloat(bVal);
            }

            if (direction === 'asc') {
                return aVal > bVal ? 1 : -1;
            } else {
                return aVal < bVal ? 1 : -1;
            }
        });

        updateTableWithData(sortedData);
    } catch (error) {
        console.error('Error sorting table:', error);
        showError('Failed to sort table');
    }
}

// Export functionality
function exportTableToCSV() {
    try {
        if (!tbody) return;

        const rows = Array.from(tbody.querySelectorAll('tr'));
        const headers = visibleColumns.map(col => columnDisplayNames[col] || col);
        
        let csvContent = headers.join(',') + '\n';
        
        rows.forEach(row => {
            const cells = Array.from(row.querySelectorAll('td'));
            const rowData = cells.map(cell => {
                let content = cell.textContent;
                // Handle content with commas by wrapping in quotes
                if (content.includes(',')) {
                    content = `"${content}"`;
                }
                return content;
            });
            csvContent += rowData.join(',') + '\n';
        });
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'player_stats.csv';
        link.click();

        showSuccess('Data exported successfully');
    } catch (error) {
        console.error('Error exporting to CSV:', error);
        showError('Failed to export data');
    }
}

// Print functionality
function printTable() {
    try {
        if (!table) return;

        const printWindow = window.open('', '_blank');
        const tableClone = table.cloneNode(true);
        
        const styles = `
            <style>
                table { border-collapse: collapse; width: 100%; margin-bottom: 1rem; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f8f9fa; }
                .stat-elite { color: #2da44e; font-weight: 600; }
                .stat-very-good { color: #8bcd50; font-weight: 500; }
                .stat-good { color: #b1e474; }
                .stat-average { color: #6B7280; }
                .stat-below-average { color: #e47474; }
                .stat-not-good { color: #d73a4a; }
                @media print {
                    th { background-color: #f8f9fa !important; -webkit-print-color-adjust: exact; }
                }
            </style>
        `;
        
        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
                <head>
                    <title>Player Statistics</title>
                    ${styles}
                </head>
                <body>
                    <h1>Player Statistics</h1>
                    ${tableClone.outerHTML}
                </body>
            </html>
        `);
        
        printWindow.document.close();
        printWindow.print();

        showSuccess('Print preview opened');
    } catch (error) {
        console.error('Error printing table:', error);
        showError('Failed to open print preview');
    }
}

// Utility function for debouncing
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Initialize tooltips for stat explanations
function initializeTooltips() {
    try {
        const cells = document.querySelectorAll('td[data-column]');
        cells.forEach(cell => {
            const column = cell.dataset.column;
            if (statRatings[column]) {
                const tooltip = document.createElement('div');
                tooltip.className = 'stat-tooltip';
                tooltip.textContent = `Rating thresholds:
                    Elite: ${statRatings[column].elite}+
                    Very Good: ${statRatings[column].veryGood}+
                    Good: ${statRatings[column].good}+
                    Average: ${statRatings[column].average}+
                    Below Average: ${statRatings[column].belowAverage}+`;
                
                cell.setAttribute('title', tooltip.textContent);
            }
        });
    } catch (error) {
        console.warn('Error initializing tooltips:', error);
    }
}

// Handle online/offline status
window.addEventListener('online', () => {
    showSuccess('Connection restored. Refreshing data...');
    initializePage();
});

window.addEventListener('offline', () => {
    showError('You are offline. Some features may be unavailable.');
});

// Clean up function for page unload
window.addEventListener('unload', () => {
    // Clear any intervals or timeouts
    const timeouts = window.performance.getEntriesByType('resource')
        .filter(entry => entry.initiatorType === 'timeout');
    timeouts.forEach(timeout => clearTimeout(timeout));
});

// Initialize the page when the DOM is loaded
document.addEventListener('DOMContentLoaded', initializePage);